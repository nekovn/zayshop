<?php

namespace App\Models;

use App\Cart\Contracts\InstanceIdentifier;
use App\Enums\CodeDefine;
//use App\Notifications\Member\VerifyNotification;
use App\Notifications\Member\PasswordResetNotification;
use Illuminate\Auth\MustVerifyEmail;
use Illuminate\Contracts\Auth\CanResetPassword;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Str;
use Illuminate\Foundation\Auth\User as Authenticatable;

class Customer extends Authenticatable implements CanResetPassword
{
    protected $guarded = ['id', 'created_at', 'updated_at', 'created_by', 'updated_by'];
    protected $appends = ['status_name', 'button', 'customer_type_name', 'gender_name', 'delete_name', 'image_name', 'room_name', 'remark_name'];
    protected $hidden = ['customerType', 'genderId', 'status', 'isDeleted', 'room', 'remark'];
    protected $table = 'customers';

    use BaseModelTrait;
    use AuthenticationModelTrait;
    use MustVerifyEmail, Notifiable;

    /**
     * Send the email verification notification.
     * Gửi thông báo xác minh email khi dang ki, ko can token.
     * https://viblo.asia/p/tim-hieu-email-verification-trong-laravel-GrLZDX6wZk0
     * trong providers/eventServiceProvider
     * @return void
     */
    //https://runebook.dev/ja/docs/laravel/api/8.x/illuminate/auth/mustverifyemail

    public function sendEmailVerificationNotification()
    {
//        $this->notify(new VerifyNotification());
    }

    /**
     * Send the email password reset notification.
     * method mac dinh nay cua CanResetPassword
     * khi gui email reset password thi CanResetPassword se cho ra 1 token
     * khi goi sendResetLinkEmail o Client/Auth/ForgotPasswordController  (use SendsPasswordResetEmails)
     * sendResetLinkEmail sendResetLink() function co CanResetPassword
     * app/Notifications/PasswordResetNotification
     * https://kungfuphp.com/lap-trinh/laravel-framework-5/su-dung-passwordcontroller-trong-laravel-5-de-khoi-phuc-mat-khau.html
     * @return void
     *
     */
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new PasswordResetNotification($token));
    }

    public function getButtonAttribute()
    {
        return config('app-settings-admin.tbodyBtn.client');
    }

    public function getStatusNameAttribute()
    {
        return isset($this->status) ? $this->status->value : '';
    }

    public function getRemarkNameAttribute()
    {
        return $this->remark ? __('global.S.yes') : __('global.S.not');
    }
    public function getCustomerTypeNameAttribute()
    {
        return isset($this->customerType) ? $this->customerType->value : '';
    }

    public function getGenderNameAttribute()
    {
        return isset($this->genderId) ? $this->genderId->value : '';
    }

    public function getDeleteNameAttribute()
    {
        return isset($this->isDeleted) ? $this->isDeleted->value : '';
    }

    public function getImageNameAttribute()
    {
        return isset($this->imageCustomer) ? $this->imageCustomer : '';
    }

    public function getRoomNameAttribute()
    {
        return isset($this->room) ? $this->room->value :  __('global.S.not.exist.rom');
    }

    public function customerType()
    {
        return $this->belongsTo(CodeValue::class, 'customer_type', 'key')->where('code_id', CodeDefine::CUSTOMER_TYPE);
    }

    public function genderId()
    {
        return $this->belongsTo(CodeValue::class, 'gender', 'key')->where('code_id', CodeDefine::CODE_GENDER);
    }

    public function status()
    {
        return $this->belongsTo(CodeValue::class, 'status_id', 'key')->where('code_id', CodeDefine::CODE_STATUS);
    }

    public function isDeleted()
    {
        return $this->belongsTo(CodeValue::class, 'deleted_id', 'key')->where('code_id', CodeDefine::CODE_DELETED);
    }

    public function imageCustomer() {
        return $this->hasMany(ImageCustomer::class, 'customer_id', 'id');
    }

    public function room()
    {
        return $this->belongsTo(CodeValue::class, 'room_id', 'key')->where('code_id', CodeDefine::CODE_ROOM);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($customer) {
            $customer->uuid = Str::uuid();
        });

//        self::saving(function ($client) {
//            $client->full_name = $client->surname.' '.$client->name;
//
//        });
    }


}
